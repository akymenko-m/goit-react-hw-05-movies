{"version":3,"file":"static/js/387.3687bae4.chunk.js","mappings":"uRAEaA,EAAWC,EAAAA,GAAAA,GAAH,qGAORC,EAAWD,EAAAA,GAAAA,GAAH,sLAiBRE,EAAaF,EAAAA,GAAAA,IAAH,qF,SCmCvB,EAvDa,WACX,IAAQG,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAkCE,EAAAA,EAAAA,UAAS,IAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KAqBA,OAnBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAc,mCAAG,WAAMR,GAAN,8EACrBM,GAAa,GADQ,mBAGKG,EAAAA,EAAAA,IAAiBT,GAHtB,OAGbG,EAHa,OAKnBC,EAAaD,EAAUO,MALJ,gDAOnBC,QAAQC,IAAR,MAPmB,yBASnBN,GAAa,GATM,4EAAH,sDAaJ,OAAZN,GAEJQ,EAAeR,EAChB,GAAE,CAACA,KAGF,gCACGK,IAAa,SAACQ,EAAA,EAAD,KACd,SAACjB,EAAD,UACGO,EAAUW,KAAI,SAAAC,GACb,OACE,UAACjB,EAAD,YACE,0BACE,iCADF,IACgBiB,EAAGC,QAElBD,EAAGE,YACF,0BACE,sCADF,IACqBF,EAAGE,cAG1B,SAAClB,EAAD,CACEmB,IACsB,OAApBH,EAAGI,aAAH,0CACuCJ,EAAGI,cACtC,8BAENC,IAAKL,EAAGC,SAfGD,EAAGM,GAmBrB,QAIR,C","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const CastList = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 5px;\n  list-style-type: none;\n`;\n\nexport const CastItem = styled.li`\n  width: calc((100% - 15px) / 4);\n  display: flex;\n  flex-direction: column;\n  gap: 5px;\n  align-items: center;\n  box-shadow: 0px 0px 13px 1px #a39b9c;\n`;\n\n// export const MovieTitle = styled.p`\n//   height: 40px;\n//   margin-bottom: 5px;\n//   text-align: center;\n//   color: black;\n//   font-weight: 700;\n// `;\n\nexport const ActorImage = styled.img`\n  width: 80px;\n  border-radius: 50%;\n  object-fit: cover;\n`;\n","import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { requestMovieCast } from 'services/api';\nimport Loader from 'components/Loader/Loader';\nimport { ActorImage, CastItem, CastList } from './Cast.styled';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [movieCast, setMovieCast] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    const fetchMovieCast = async movieId => {\n      setIsLoading(true);\n      try {\n        const movieCast = await requestMovieCast(movieId);\n        // console.log(movieCast);\n        setMovieCast(movieCast.cast);\n      } catch (error) {\n        console.log(error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    if (movieId === null) return;\n\n    fetchMovieCast(movieId);\n  }, [movieId]);\n\n  return (\n    <>\n      {isLoading && <Loader />}\n      <CastList>\n        {movieCast.map(el => {\n          return (\n            <CastItem key={el.id}>\n              <p>\n                <b>Name:</b> {el.name}\n              </p>\n              {el.character && (\n                <p>\n                  <b>Character:</b> {el.character}\n                </p>\n              )}\n              <ActorImage\n                src={\n                  el.profile_path !== null\n                    ? `https://image.tmdb.org/t/p/w200/${el.profile_path}`\n                    : 'http://placehold.it/200x300'\n                }\n                alt={el.name}\n              />\n            </CastItem>\n          );\n        })}\n      </CastList>\n    </>\n  );\n};\n\nexport default Cast;\n"],"names":["CastList","styled","CastItem","ActorImage","movieId","useParams","useState","movieCast","setMovieCast","isLoading","setIsLoading","useEffect","fetchMovieCast","requestMovieCast","cast","console","log","Loader","map","el","name","character","src","profile_path","alt","id"],"sourceRoot":""}